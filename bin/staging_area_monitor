#!/usr/bin/env perl

package staging_area_monitor;

use strict;
use warnings;
use FindBin qw($Bin);
use lib ( -d "$Bin/../lib/perl5" ? "$Bin/../lib/perl5" : "$Bin/../lib" );
use Carp;
use English qw(-no_match_vars);
use POSIX qw(strftime);
use Readonly;
use Try::Tiny;

use Monitor::Staging;
use Monitor::RunFolder::Staging;

our $VERSION = '0';

Readonly::Scalar my $SLEEP_INTERVAL => 60 * 15;

local $OUTPUT_AUTOFLUSH = 1;

sub _log {
    my @ms = map { "\t$_\n" } @_;
    print {*STDOUT}  @ms or carp $OS_ERROR;
}

sub _log_noindent {
    my @ms = map { "\n$_\n" } @_;
    print {*STDOUT} @ms or carp $OS_ERROR;
}

my %previous_size_of;
my %checked;

my $monitor   = Monitor::Staging->new();
my @area_list = $monitor->validate_areas(@ARGV);

croak 'No valid arguments' if scalar @area_list == 0;

my $dry_run = $ENV{'dev'} && ($ENV{'dev'} ne 'live');
_log_noindent('*************** ' . ($dry_run ? 'DRY RUN' : 'LIVE RUN') .
          ' ***************');

my $check_path = sub { ##### Function to deal with one run folder
    my $run_path = shift;

    my $folder = Monitor::RunFolder::Staging->new(
                   runfolder_path      => $run_path,
                   npg_tracking_schema => $monitor->schema);
    my $run_status = $folder->current_run_status_description();
    my $id_run = $folder->tracking_run()->id_run;

    _log("Run $id_run status $run_status");

    if ($folder->is_in_analysis) {
        _log('Folder is in /analysis/');

        if( $run_status eq 'qc complete') {
            if ($dry_run) {
                _log('DRY RUN - not moving to outgoing');
            } else {
                _log('Will try to move to outgoing');
                try {
                    _log($folder->move_to_outgoing());
                } catch {
                    _log("ERROR moving to outgoing: $_");
                };
            }
        }
        return; # Nothing else to do for a folder in /analysis/
    }

    _log('Folder is in /incoming/');

    # If we don't remember seeing it before set the folder name and glob;
    # set staging tag, if appropriate, set/fix instrument side, workflow side.
    # Previously we avoided making changes to the db if status was at or after
    # 'run complete'. We might consider reinstating this rule.
    if ( not defined $previous_size_of{$run_path} ) {
        $folder->update_folder();
        $folder->tracking_run()->set_tag( $folder->username(), 'staging' );
        _log('Set staging tag');
        try {
            my $iside = $folder->set_instrument_side();
            if ($iside) {
                _log("Instrument side is set to $iside");
            }
            my $wf_type = $folder->set_workflow_type();
            if ($wf_type) {
                _log("Workflow type is set to $wf_type");
            }
        } catch {
            _log('Error setting instrument side and/or run workflow type: ' . $_);
        };
        # We might want to expand this section to set/fix other tags, see currently
        # unused read_long_info method in Monitor::RunFolder
        $previous_size_of{$run_path} = 0;
    }

    # Could delete the directory here. Leave it for now.
    return if $run_status eq 'data discarded';

    if ( $run_status eq 'run pending' )  {
        my $latest_cycle = $folder->get_latest_cycle($folder->runfolder_path());
        $folder->check_cycle_count($latest_cycle, 0);
        return;
    }

    if ( $run_status eq 'run in progress' ) {
        my $latest_cycle = $folder->get_latest_cycle($folder->runfolder_path());
        my $run_complete = $folder->is_run_complete();
        $folder->check_cycle_count($latest_cycle, $run_complete);
        $folder->cycle_lag($run_path) ? $folder->tracking_run()->set_tag( $folder->username(), 'copying_problem' )
                                      : $folder->tracking_run()->unset_tag( 'copying_problem' );
        return;
    }

    if ( $run_status eq 'run complete' ) {
        $folder->cycle_lag($run_path) ? $folder->tracking_run()->set_tag( $folder->username(), 'copying_problem' )
                                      : $folder->tracking_run()->unset_tag( 'copying_problem' );
        $folder->update_folder();

        # Integrity check - got everything.
        return if $folder->cycle_lag($run_path);
        return if !$folder->validate_run_complete();
        $checked{$run_path}++;

        my $path = $folder->runfolder_path();
        my $latest_cycle = $folder->get_latest_cycle($path);

        $folder->check_cycle_count( $latest_cycle, 1 );

        my ( $total_size, $latest_mod ) = $folder->monitor_stats();

        # Check that no file is 'in the future'.
        if ( $latest_mod > time ) {
            $previous_size_of{$run_path} = $total_size;
            _log("Not done: 'future' file $latest_mod");
            return;
        }

        # Check that there's been no activity since last time.
        if ( $total_size != $previous_size_of{$run_path} ) {
            _log(sprintf 'Sizes not equal: %d %d',
                $previous_size_of{$run_path}, $total_size);
            $previous_size_of{$run_path} = $total_size;
            return;
        }

        if ($dry_run) {
            _log('DRY RUN - not calling mark_as_mirrored and move_to_analysis');
        } else {
            $folder->mark_as_mirrored();
            _log('Folder marked as mirrored');
            try {
                _log($folder->move_to_analysis());
            } catch {
                _log("ERROR moving to analysis: $_");
            };
        }
    }
}; ###### End of function to deal with one run folder

###########################################################
###############   Main daemon loop  #######################
###########################################################
while (1) {

    _log_noindent(strftime '%a %b %e %T %Y%n', localtime);

    foreach my $area (@area_list) {

        foreach my $run_path ( $monitor->find_live($area) ) {
            _log_noindent("Considering $run_path");
            try {
                $check_path->($run_path);
            } finally {
                if (@_) {
                    _log("ERROR: Execution for $run_path died with: @_\n");
                } else {
                    _log("Succesfully processed $run_path");
                }
            };
        }
    }

    # Clean out %previous_size so that it doesn't grow and grow.
    foreach my $completed_runpath ( keys %previous_size_of ) {
        next if defined $checked{$completed_runpath};
        delete $previous_size_of{$completed_runpath};
    }

    sleep $SLEEP_INTERVAL;
}


1;

__END__


=head1 NAME

staging_area_monitor - monitor incoming runs for problems and completion

=head1 VERSION

=head1 SYNOPSIS

    staging_area_monitor [0] [1] ... [8]
OR:
    staging_area_monitor [/nfs/sf10] [/nfs/sf8] ...

In the first version the integer is taken as an array index. The array is
maintained in @npg_tracking::illumina::run::folder::location::STAGING_AREAS, any integer
that is greater than the last element's index will be ignored.

In the second version a test is done to see that the argument is a directory
on the filesystem. Any argument that is not a directory will be ignored.

Both argument types can be mixed also.

=head1 DESCRIPTION

Monitor one or more staging areas supplied as commandline arguments.

The script runs an infinite loop so do not call it via a crontab.

Actions for runs in the incoming directory:

Check the number of cycles mirrored is not lagging behind the actual cycle
count. Tag the run as 'copying_problem' if it is, remove the tag if it isn't.

If the run has a status of 'run complete' check to make sure that all activity
has stopped (no change in the sum of file sizes, no modtimes in advance of the
present). When this is the case run some validation checks, set the status to
'run mirrored', move the run folder to 'analysis', and set the status to
'analysis pending'.

Actions for runs in analysis directory:

If the run status is 'qc complete, the run is moved to the outgoing directory.

=head1 SUBROUTINES/METHODS

None

=head1 CONFIGURATION AND ENVIRONMENT

If dev environment variable is set, the script will carry out all the
same functions but will not make any file-system changes

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

None known. Yet.

=head1 AUTHOR

John O'Brien, E<lt>jo3@sanger.ac.ukE<gt>

=head1 LICENCE AND COPYRIGHT

Copyright (C) 2015 GRL, by John O'Brien

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
